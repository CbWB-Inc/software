global power_off

global _font_table
global _scancode_table
section .text

; ========================================
; 完全なACPI電源オフ実装（64ビット）
; ========================================
global acpi_poweroff

; ========================================
; メイン電源オフ関数
; ========================================
acpi_poweroff:
    push rbp
    mov rbp, rsp
    push rbx
    push rcx
    push rdx
    push rsi
    push rdi
    
    ; 1. RSDP を探す
    call find_rsdp
    test rax, rax
    jz .poweroff_failed
    mov [rsdp_addr], rax
    
    ; 2. RSDT/XSDT を取得
    call get_rsdt
    test rax, rax
    jz .poweroff_failed
    mov [rsdt_addr], rax
    
    ; 3. FADT を探す
    call find_fadt
    test rax, rax
    jz .poweroff_failed
    mov [fadt_addr], rax
    
    ; 4. DSDT を解析して _S5 を探す
    call parse_dsdt_for_s5
    test rax, rax
    jz .poweroff_failed
    
    ; 5. 電源オフ実行
    call execute_poweroff
    
.poweroff_failed:
    ; フォールバック: 既知のポートを試す
    call fallback_poweroff
    
    pop rdi
    pop rsi
    pop rdx
    pop rcx
    pop rbx
    pop rbp
    ret

; ========================================
; RSDP (Root System Description Pointer) 検索
; ========================================
find_rsdp:
    push rbp
    mov rbp, rsp
    
    ; EBDA (Extended BIOS Data Area) を検索
    mov rsi, 0x40E           ; EBDA セグメントアドレス
    movzx rax, word [rsi]
    shl rax, 4               ; セグメント -> 物理アドレス
    mov rsi, rax
    mov rcx, 1024            ; EBDA は最大1KB
    call search_rsdp_in_range
    test rax, rax
    jnz .found
    
    ; BIOS領域 0xE0000-0xFFFFF を検索
    mov rsi, 0xE0000
    mov rcx, 0x20000
    call search_rsdp_in_range
    test rax, rax
    jnz .found
    
    ; UEFI システムテーブルから検索（簡略化）
    mov rax, 0
    jmp .end
    
.found:
    ; RSDP の検証
    call verify_rsdp
    
.end:
    pop rbp
    ret

; ========================================
; 指定範囲でRSDP検索
; ========================================
search_rsdp_in_range:
    push rbp
    mov rbp, rsp
    
.search_loop:
    cmp rcx, 16
    jb .not_found
    
    ; "RSD PTR " シグネチャをチェック
    mov rax, qword [rsi]
    cmp rax, 0x2052545020445352  ; "RSD PTR "
    je .check_checksum
    
    add rsi, 16              ; 16バイト境界で検索
    sub rcx, 16
    jmp .search_loop
    
.check_checksum:
    ; チェックサムを検証
    push rsi
    push rcx
    mov rdi, rsi
    mov rcx, 20              ; RSDP v1.0 は20バイト
    call calculate_checksum
    pop rcx
    pop rsi
    test al, al
    jz .found
    
    add rsi, 16
    sub rcx, 16
    jmp .search_loop
    
.not_found:
    xor rax, rax
    jmp .end
    
.found:
    mov rax, rsi
    
.end:
    pop rbp
    ret

; ========================================
; チェックサム計算
; ========================================
calculate_checksum:
    push rbp
    mov rbp, rsp
    
    xor rax, rax
    
.loop:
    test rcx, rcx
    jz .end
    add al, byte [rdi]
    inc rdi
    dec rcx
    jmp .loop
    
.end:
    pop rbp
    ret

; ========================================
; RSDP検証
; ========================================
verify_rsdp:
    push rbp
    mov rbp, rsp
    
    ; v1.0 チェックサム
    mov rdi, rax
    mov rcx, 20
    call calculate_checksum
    test al, al
    jnz .invalid
    
    ; ACPI 2.0+ の場合は追加検証
    cmp byte [rdi + 15], 2   ; Revision フィールド
    jb .valid
    
    ; v2.0+ チェックサム（36バイト）
    mov rcx, 36
    call calculate_checksum
    test al, al
    jnz .invalid
    
.valid:
    mov rax, rdi
    jmp .end
    
.invalid:
    xor rax, rax
    
.end:
    pop rbp
    ret

; ========================================
; RSDT/XSDT 取得
; ========================================
get_rsdt:
    push rbp
    mov rbp, rsp
    
    mov rsi, qword [rsdp_addr]
    
    ; ACPI 2.0+ なら XSDT を使用
    cmp byte [rsi + 15], 2
    jb .use_rsdt
    
    ; XSDT アドレス取得（64ビット）
    mov rax, qword [rsi + 24]
    jmp .verify
    
.use_rsdt:
    ; RSDT アドレス取得（32ビット）
    mov eax, dword [rsi + 16]
    
.verify:
    ; RSDT/XSDT の検証
    call verify_acpi_table
    
.end:
    pop rbp
    ret

; ========================================
; ACPI テーブル検証
; ========================================
verify_acpi_table:
    push rbp
    mov rbp, rsp
    
    ; シグネチャとチェックサムを検証
    mov rdi, rax
    mov ecx, dword [rdi + 4]  ; Length フィールド
    call calculate_checksum
    test al, al
    jnz .invalid
    
    mov rax, rdi
    jmp .end
    
.invalid:
    xor rax, rax
    
.end:
    pop rbp
    ret

; ========================================
; FADT テーブル検索
; ========================================
find_fadt:
    push rbp
    mov rbp, rsp
    
    mov rsi, qword [rsdt_addr]
    mov ecx, dword [rsi + 4]  ; RSDT Length
    sub ecx, 36               ; ヘッダサイズを除く
    shr ecx, 2                ; エントリ数（32ビット単位）
    add rsi, 36               ; エントリ開始位置
    
.search_loop:
    test ecx, ecx
    jz .not_found
    
    mov eax, dword [rsi]      ; テーブルアドレス
    push rsi
    push rcx
    
    ; FADT シグネチャ "FACP" をチェック
    mov edi, eax
    cmp dword [rdi], 0x50434146  ; "FACP"
    je .found_fadt
    
    pop rcx
    pop rsi
    add rsi, 4
    dec ecx
    jmp .search_loop
    
.found_fadt:
    pop rcx
    pop rsi
    mov rax, rdi
    jmp .end
    
.not_found:
    xor rax, rax
    
.end:
    pop rbp
    ret

; ========================================
; DSDT 解析して _S5 パッケージを検索
; ========================================
parse_dsdt_for_s5:
    push rbp
    mov rbp, rsp
    
    ; FADT から DSDT アドレスを取得
    mov rsi, qword [fadt_addr]
    mov eax, dword [rsi + 40]  ; DSDT アドレス（32ビット）
    mov rdi, rax
    
    ; DSDT 検証
    call verify_acpi_table
    test rax, rax
    jz .failed
    
    ; AML バイトコード解析（簡略化）
    call parse_aml_for_s5
    
.failed:
    
.end:
    pop rbp
    ret

; ========================================
; AML 解析（簡略化版）
; ========================================
parse_aml_for_s5:
    push rbp
    mov rbp, rsp
    
    ; 実際のAML解析は非常に複雑なため、
    ; 一般的な _S5 パッケージパターンを検索
    
    mov rsi, rdi
    add rsi, 36               ; AML データ開始
    mov ecx, dword [rdi + 4]  ; テーブル長
    sub ecx, 36
    
.search_s5:
    cmp rcx, 10
    jb .not_found
    
    ; "_S5_" パターンを検索
    cmp dword [rsi], 0x5F35535F  ; "_S5_"
    je .found_s5
    
    inc rsi
    dec rcx
    jmp .search_s5
    
.found_s5:
    ; _S5 パッケージを解析（簡略化）
    add rsi, 4
    call parse_s5_package
    jmp .end
    
.not_found:
    ; デフォルト値を設定
    mov word [s5_slp_typa], 5
    mov word [s5_slp_typb], 5
    mov rax, 1
    
.end:
    pop rbp
    ret

; ========================================
; _S5 パッケージ解析
; ========================================
parse_s5_package:
    push rbp
    mov rbp, rsp
    
    ; パッケージヘッダをスキップして値を取得
    ; これは簡略化された実装
    
    ; 一般的な _S5 値
    mov al, byte [rsi + 5]    ; 最初の値（SLP_TYPa）
    mov byte [s5_slp_typa], al
    
    mov al, byte [rsi + 7]    ; 2番目の値（SLP_TYPb）
    mov byte [s5_slp_typb], al
    
    mov rax, 1                ; 成功
    
    pop rbp
    ret

; ========================================
; 電源オフ実行
; ========================================
execute_poweroff:
    push rbp
    mov rbp, rsp
    
    ; FADT から PM1a_CNT_BLK を取得
    mov rsi, qword [fadt_addr]
    mov dx, word [rsi + 64]   ; PM1a_CNT_BLK
    test dx, dx
    jz .try_pm1b
    
    ; SLP_TYPa と SLP_EN を設定
    movzx ax, byte [s5_slp_typa]
    shl ax, 10                ; SLP_TYPa をビット13-10に
    or ax, 0x2000             ; SLP_EN ビット（ビット13）
    out dx, ax
    
    ; 少し待機
    mov rcx, 1000000
.wait1:
    pause
    loop .wait1
    
.try_pm1b:
    ; PM1b_CNT_BLK も試す
    mov dx, word [rsi + 68]
    test dx, dx
    jz .end
    
    movzx ax, byte [s5_slp_typb]
    shl ax, 10
    or ax, 0x2000
    out dx, ax
    
.end:
    pop rbp
    ret

; ========================================
; フォールバック電源オフ
; ========================================
fallback_poweroff:
    push rbp
    mov rbp, rsp
    
    ; QEMU/KVM
    mov dx, 0x604
    mov ax, 0x2000
    out dx, ax
    
    ; Bochs/旧QEMU
    mov dx, 0xB004
    mov ax, 0x2000
    out dx, ax
    
    ; VirtualBox
    mov dx, 0x4004
    mov ax, 0x3400
    out dx, ax
    
    ; VMware
    mov dx, 0x1CF9
    mov al, 0x0E
    out dx, al
    
    ; Triple fault（最後の手段）
    cli
    mov rax, 0
    mov cr3, rax
    
    pop rbp
    ret

; ========================================
; データセクション
; ========================================
section .data
    rsdp_addr: dq 0
    rsdt_addr: dq 0  
    fadt_addr: dq 0
    s5_slp_typa: db 5
    s5_slp_typb: db 5

; section .bss
;     ; 必要に応じてバッファを追加





section .text


;****************************
; power_off
; 	パワーオフ
;****************************
power_off:

    ; APM-BIOSのバージョン取得
    ; mov ax, 0x5300
    ; mov bx, 0
    ; int 0x15
    ; jc ._exit
    ; cmp ax, 0x0101
    ; js ._exit

    ; リアルモードからの制御を宣言（これ、もしかしたらリアルモードへの変更かも）
;     mov ax, 0x5301
;     mov bx, 0
;     int 0x15

;     ; APM-BIOS ver 1.1を有効化
;     mov ax, 0x530e
;     mov bx, 0
;     mov cx, 0x0101
;     int 0x15
;     jc ._exit

;     ; 全デバイスのAPM設定を連動させる
;     mov ax, 0x530f
;     mov bx, 0x0001
;     mov cx, 0x0001
;     int 0x15
;     jc ._exit

;     ; 全デバイスのAPM機能有効化
;     mov ax, 0x5308
;     mov bx, 0x0001
;     mov cx, 0x0001
;     int 0x15
;     jc ._exit

;     ; 電源OFF
;     mov ax, 0x5307
;     mov bx, 0x0001
;     mov cx, 0x0003
;     int 0x15

; ._exit:

;     ret

section .data
_font_table:
    _font_space: 
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_exclamation: 
        db 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_double_quot:
        db 0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_hash: 
        db 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00
    _font_dollar: 
        db 0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00
    _font_percent:
        db 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00
    _font_ampersand:
        db 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00
    _font_single_quote:
        db 0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_left_parenthesis:
        db 0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00
    _font_right_parenthesis:
        db 0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00
    _font_asterisk:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_plus:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_comma:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00
    _font_minus: 
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_period: 
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_slash: 
        db 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00
    _font_0:
        db 0x00, 0x00, 0x3C, 0x66, 0xC3, 0xC3, 0xDB, 0xDB, 0xC3, 0xC3, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_1:
        db 0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00
    _font_2:
        db 0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00
    _font_3:
        db 0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_4:
        db 0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00
    _font_5:
        db 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_6:
        db 0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_7:
        db 0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00
    _font_8:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_9:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00
    _font_colon:
        db 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_semicolon:
        db 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00
    _font_less_than:
        db 0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00
    _font_equals:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_greater_than:
        db 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00
    _font_question:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_at:
        db 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_A:
        db 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00
    _font_B:
        db 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00
    _font_C:
        db 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_D:
        db 0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00
    _font_E:
        db 0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00
    _font_F:
        db 0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00
    _font_G:
        db 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00
    _font_H:
        db 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00
    _font_I:
        db 0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_J:
        db 0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00
    _font_K:
        db 0x00, 0x00, 0xE6, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00
    _font_L:
        db 0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00
    _font_M:
        db 0x00, 0x00, 0xC3, 0xE7, 0xFF, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00
    _font_N:
        db 0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00
    _font_O:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_P:
        db 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00
    _font_Q:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00
    _font_R:
        db 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00
    _font_S:
        db 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_T:
        db 0x00, 0x00, 0xFF, 0xDB, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_U:
        db 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_V:
        db 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_W:
        db 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00
    _font_X:
        db 0x00, 0x00, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x66, 0xC3, 0xC3, 0x00, 0x00, 0x00, 0x00
    _font_Y:
        db 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_Z:
        db 0x00, 0x00, 0xFF, 0xC3, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0xC3, 0xFF, 0x00, 0x00, 0x00, 0x00
    _font_left_bracket:
        db 0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_backslash:
        db 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00
    _font_right_bracket:
        db 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_caret:
        db 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_underscore:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00
    _font_back_quote:
        db 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _font_a:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00
    _font_b:
        db 0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_c:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_d:
        db 0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00
    _font_e:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_f:
        db 0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00
    _font_g:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00
    _font_h:
        db 0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00
    _font_i:
        db 0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_j:
        db 0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00
    _font_k:
        db 0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00
    _font_l:
        db 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00
    _font_m:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x00, 0x00, 0x00, 0x00
    _font_n:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00
    _font_o:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_p:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00
    _font_q:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00
    _font_r:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00
    _font_s:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00
    _font_t:
        db 0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00
    _font_u:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00
    _font_v:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_w:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xFF, 0x66, 0x00, 0x00, 0x00, 0x00
    _font_x:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0xC3, 0x00, 0x00, 0x00, 0x00
    _font_y:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00
    _font_z:
        db 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00
    _font_left_brace:
        db 0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00
    _font_pipe:
        db 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00
    _font_right_brace:
        db 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00
    _font_tilde:
        db 0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    _terminate:
        db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

_scancode_table:
    ; Format: dw scancode, ascii+flags
    ; flags: bit0 = make(1)/break(0)

    ; ----------- 数字行（1～0, Shift対応） -----------
    dw 0x0002, '1'+ 256
    dw 0x0082, '1'
    dw 0x8002, '!'+ 256
    dw 0x8082, '!'

    dw 0x0003, '2'+ 256
    dw 0x0083, '2'
    dw 0x8003, '"'+ 256
    dw 0x8083, '"'

    dw 0x0004, '3'+ 256
    dw 0x0084, '3'
    dw 0x8004, '#'+ 256
    dw 0x8084, '#'

    dw 0x0005, '4'+ 256
    dw 0x0085, '4'
    dw 0x8005, '$'+ 256
    dw 0x8085, '$'

    dw 0x0006, '5'+ 256
    dw 0x0086, '5'
    dw 0x8006, '%'+ 256
    dw 0x8086, '%'

    dw 0x0007, '6'+ 256
    dw 0x0087, '6'
    dw 0x8007, '&'+ 256
    dw 0x8087, '&'

    dw 0x0008, '7'+ 256
    dw 0x0088, '7'
    dw 0x8008, '\''+ 256
    dw 0x8088, '\''

    dw 0x0009, '8'+ 256
    dw 0x0089, '8'
    dw 0x8009, '('+ 256
    dw 0x8089, '('

    dw 0x000A, '9'+ 256
    dw 0x008A, '9'
    dw 0x800A, ')'+ 256
    dw 0x808A, ')'

    dw 0x000B, '0'+ 256
    dw 0x008B, '0'
    dw 0x800B, '0'+ 256
    dw 0x808B, '0'

    ; ----------- 記号・句読点 -----------
    dw 0x000C, '-'+ 256
    dw 0x008C, '-'
    dw 0x800C, '=' + 256
    dw 0x808C, '='

    dw 0x000D, '^'+ 256
    dw 0x008D, '^'
    dw 0x800D, '~'+ 256
    dw 0x808D, '~'

    dw 0x00FD, '\\'+ 256
    dw 0x007D, '\\'
    dw 0x80FD, '|'+ 256
    dw 0x807D, '|'

    dw 0x001a, '@'+ 256
    dw 0x009a, '@'
    dw 0x801a, '`'+ 256
    dw 0x809a, '`'

    dw 0x001b, '['+ 256
    dw 0x009b, '['
    dw 0x801b, '{'+ 256
    dw 0x809b, '{'

    dw 0x0027, ';'+ 256
    dw 0x00a7, ';'
    dw 0x8027, '+'+ 256
    dw 0x80a7, '+'

    dw 0x0028, ':'+ 256
    dw 0x00a8, ':'
    dw 0x8028, '*'+ 256
    dw 0x80a8, '*'

    dw 0x002b, ']'+ 256
    dw 0x00ab, ']'
    dw 0x802b, '}'+ 256
    dw 0x80ab, '}'

    dw 0x0033, ','+ 256
    dw 0x00b3, ','
    dw 0x8033, '<'+ 256
    dw 0x80b3, '<'

    dw 0x0034, '.'+ 256
    dw 0x00b4, '.'
    dw 0x8034, '>'+ 256
    dw 0x80b4, '>'

    dw 0x0035, '/'+ 256
    dw 0x00b5, '/'
    dw 0x8035, '?'+ 256
    dw 0x80b5, '?'

    dw 0x0073, '\\'+ 256
    dw 0x00f3, '\\'
    dw 0x8073, '_'+ 256
    dw 0x80f3, '_'

    ; ----------- スペース・制御 -----------
    dw 0x000E, 0x08+ 256            ; BS
    dw 0x008E, 0x08
    dw 0x800E, 0x08+ 256
    dw 0x808E, 0x08

    dw 0x000F, 0x09+ 256            ; TAB
    dw 0x008F, 0x09
    dw 0x800F, 0x09+ 256
    dw 0x808F, 0x09

    dw 0x001C, 0x0D+ 256            ; CR
    dw 0x009C, 0x0D
    dw 0x801C, 0x0D+ 256
    dw 0x809C, 0x0D

    dw 0x0053, 0x7F+ 256            ; Del
    dw 0x00D3, 0x7F
    dw 0x8053, 0x7F+ 256
    dw 0x80D3, 0x7F

    dw 0x0001, 0x1B+ 256            ; Esc
    dw 0x0081, 0x1B
    dw 0x8001, 0x1B+ 256
    dw 0x8081, 0x1B

    dw 0x0039, 0x20+ 256            ; SP
    dw 0x00b9, 0x20
    dw 0x8039, 0x20+ 256
    dw 0x80b9, 0x20

    dw 0x0048, 0x11+ 256            ; ↑
    dw 0x00c8, 0x11
    dw 0x8048, 0x11+ 256
    dw 0x80c8, 0x11

    dw 0x0050, 0x12+ 256            ; ↓
    dw 0x00d0, 0x12
    dw 0x8050, 0x12+ 256
    dw 0x80d0, 0x12

    dw 0x004b, 0x13+ 256            ; ←
    dw 0x00cb, 0x13
    dw 0x804b, 0x13+ 256
    dw 0x80cb, 0x13

    dw 0x004d, 0x14+ 256            ; →
    dw 0x00cd, 0x14
    dw 0x804d, 0x14+ 256
    dw 0x80cd, 0x14

    dw 0x0029, 0x0f+ 256            ; 漢字
    dw 0x0029, 0x0f
    dw 0x8029, 0x0f+ 256
    dw 0x8029, 0x0f

    ; ----------- アルファベット -----------
    dw 0x0010, 'q'+256
    dw 0x0090, 'q'
    dw 0x8010, 'Q'+256
    dw 0x8090, 'Q'

    dw 0x0011, 'w'+256
    dw 0x0091, 'w'
    dw 0x8011, 'W'+256
    dw 0x8091, 'W'

    dw 0x0012, 'e'+256
    dw 0x0092, 'e'
    dw 0x8012, 'E'+256
    dw 0x8092, 'E'

    dw 0x0013, 'r'+256
    dw 0x0093, 'r'
    dw 0x8013, 'R'+256
    dw 0x8093, 'R'

    dw 0x0014, 't'+256
    dw 0x0094, 't'
    dw 0x8014, 'T'+256
    dw 0x8094, 'T'

    dw 0x0015, 'y'+256
    dw 0x0095, 'y'
    dw 0x8015, 'Y'+256
    dw 0x8095, 'Y'

    dw 0x0016, 'u'+256
    dw 0x0096, 'u'
    dw 0x8016, 'U'+256
    dw 0x8096, 'U'

    dw 0x0017, 'i'+256
    dw 0x0097, 'i'
    dw 0x8017, 'I'+256
    dw 0x8097, 'I'

    dw 0x0018, 'o'+256
    dw 0x0098, 'o'
    dw 0x8018, 'O'+256
    dw 0x8098, 'O'

    dw 0x0019, 'p'+256
    dw 0x0099, 'p'
    dw 0x8019, 'P'+256
    dw 0x8099, 'P'

    dw 0x001E, 'a'+256
    dw 0x009E, 'a'
    dw 0x801E, 'A'+256
    dw 0x809E, 'A'

    dw 0x001F, 's'+256
    dw 0x009F, 's'
    dw 0x801F, 'S'+256
    dw 0x809F, 'S'

    dw 0x0020, 'd'+256
    dw 0x00A0, 'd'
    dw 0x8020, 'D'+256
    dw 0x80A0, 'D'

    dw 0x0021, 'f'+256
    dw 0x00A1, 'f'
    dw 0x8021, 'F'+256
    dw 0x80A1, 'F'

    dw 0x0022, 'g'+256
    dw 0x00A2, 'g'
    dw 0x8022, 'G'+256
    dw 0x80A2, 'G'

    dw 0x0023, 'h'+256
    dw 0x00A3, 'h'
    dw 0x8023, 'H'+256
    dw 0x80A3, 'H'

    dw 0x0024, 'j'+256
    dw 0x00A4, 'j'
    dw 0x8024, 'J'+256
    dw 0x80A4, 'J'

    dw 0x0025, 'k'+256
    dw 0x00A5, 'k'
    dw 0x8025, 'K'+256
    dw 0x80A5, 'K'

    dw 0x0026, 'l'+256
    dw 0x00A6, 'l'
    dw 0x8026, 'L'+256
    dw 0x80A6, 'L'

    dw 0x002C, 'z'+256
    dw 0x00AC, 'z'
    dw 0x802C, 'Z'+256
    dw 0x80AC, 'Z'

    dw 0x002D, 'x'+256
    dw 0x00AD, 'x'
    dw 0x802D, 'X'+256
    dw 0x80AD, 'X'

    dw 0x002E, 'c'+256
    dw 0x00AE, 'c'
    dw 0x802E, 'C'+256
    dw 0x80AE, 'C'

    dw 0x002F, 'v'+256
    dw 0x00AF, 'v'
    dw 0x802F, 'V'+256
    dw 0x80AF, 'V'

    dw 0x0030, 'b'+256
    dw 0x00B0, 'b'
    dw 0x8030, 'B'+256
    dw 0x80B0, 'B'

    dw 0x0031, 'n'+256
    dw 0x00B1, 'n'
    dw 0x8031, 'N'+256
    dw 0x80B1, 'N'

    dw 0x0032, 'm'+256
    dw 0x00B2, 'm'
    dw 0x8032, 'M'+256
    dw 0x80B2, 'M'

    ; ----------- 終端 -----------
    dw 0xFFFF, 0xFFFF
